{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","CarSimulator","_ref","carName","count","onIncrement","onDecrement","React","createElement","className","onClick","App","porscheCount","setPorscheCount","useState","formulaCount","setFormulaCount","mercedesCount","setMercedesCount","useEffect","on","data","off","incrementPorsche","emit","decrementPorsche","incrementFormula","decrementFormula","incrementMercedes","decrementMercedes","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sKAKA,MAAMA,EAASC,YAAG,uCAGZC,EAAeC,IAAkD,IAAjDC,QAAEA,EAAOC,MAAEA,EAAKC,YAAEA,EAAWC,YAAEA,GAAaJ,EAChE,OACEK,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,UAAKL,EAAQ,KAAGC,GAChBG,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,UAAQE,QAASL,GAAa,KAC9BE,IAAAC,cAAA,UAAQE,QAASJ,GAAa,QAkEvBK,MA5Df,WAEE,MAAOC,EAAcC,GAAmBC,mBAAS,IAC1CC,EAAcC,GAAmBF,mBAAS,IAC1CG,EAAeC,GAAoBJ,mBAAS,GA0BnD,OAbAK,oBAAU,KACRpB,EAAOqB,GAAG,kBAAoBC,IAC5BR,EAAgBQ,EAAKT,cACrBI,EAAgBK,EAAKN,cACrBG,EAAiBG,EAAKJ,iBAIjB,KACLlB,EAAOuB,IAAI,qBAEZ,IAGDf,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,UAAI,yBAGJD,IAAAC,cAACP,EAAY,CACXE,QAAQ,UACRC,MAAOQ,EACPP,YAhCmBkB,IAAMxB,EAAOyB,KAAK,qBAiCrClB,YAhCmBmB,IAAM1B,EAAOyB,KAAK,uBAmCvCjB,IAAAC,cAACP,EAAY,CACXE,QAAQ,aACRC,MAAOW,EACPV,YApCmBqB,IAAM3B,EAAOyB,KAAK,qBAqCrClB,YApCmBqB,IAAM5B,EAAOyB,KAAK,uBAuCvCjB,IAAAC,cAACP,EAAY,CACXE,QAAQ,WACRC,MAAOa,EACPZ,YAxCoBuB,IAAM7B,EAAOyB,KAAK,sBAyCtClB,YAxCoBuB,IAAM9B,EAAOyB,KAAK,0BCtB/BM,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKjC,IAAiD,IAAhDmC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASvC,EACpEmC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCFDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvC,IAAAC,cAACD,IAAMwC,WAAU,KACfxC,IAAAC,cAACG,EAAG,QAORmB","file":"static/js/main.a5b995b7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport \"./App.css\"\r\n\r\n// Conexão com o servidor Socket.io\r\nconst socket = io('https://websocket-5c8h.onrender.com');\r\n\r\n// Componente para o simulador de carros\r\nconst CarSimulator = ({ carName, count, onIncrement, onDecrement }) => {\r\n  return (\r\n    <div className=\"car-simulator\">\r\n      <h3>{carName}: {count}</h3>\r\n      <div className=\"buttons\">\r\n        <button onClick={onIncrement}>+</button>\r\n        <button onClick={onDecrement}>-</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  // Estados para armazenar os contadores de cada carro\r\n  const [porscheCount, setPorscheCount] = useState(0);\r\n  const [formulaCount, setFormulaCount] = useState(0);\r\n  const [mercedesCount, setMercedesCount] = useState(0);\r\n\r\n  // Funções para emitir os eventos de incremento e decremento\r\n  const incrementPorsche = () => socket.emit(\"increment_porsche\");\r\n  const decrementPorsche = () => socket.emit(\"decrement_porsche\");\r\n\r\n  const incrementFormula = () => socket.emit(\"increment_formula\");\r\n  const decrementFormula = () => socket.emit(\"decrement_formula\");\r\n\r\n  const incrementMercedes = () => socket.emit(\"increment_mercedes\");\r\n  const decrementMercedes = () => socket.emit(\"decrement_mercedes\");\r\n\r\n  // Recebe os dados do servidor e atualiza os contadores\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setPorscheCount(data.porscheCount);\r\n      setFormulaCount(data.formulaCount);\r\n      setMercedesCount(data.mercedesCount);\r\n    });\r\n\r\n    // Cleanup: Remove o ouvinte quando o componente for desmontado\r\n    return () => {\r\n      socket.off(\"receive_message\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Térreo</h1>\r\n      <h2>Simuladores de Carro:</h2>\r\n      \r\n      {/* Usando o componente reutilizável para cada carro */}\r\n      <CarSimulator \r\n        carName=\"Porsche\" \r\n        count={porscheCount} \r\n        onIncrement={incrementPorsche} \r\n        onDecrement={decrementPorsche} \r\n      />\r\n      \r\n      <CarSimulator \r\n        carName=\"Fórmula\" \r\n        count={formulaCount} \r\n        onIncrement={incrementFormula} \r\n        onDecrement={decrementFormula} \r\n      />\r\n      \r\n      <CarSimulator \r\n        carName=\"Mercedes\" \r\n        count={mercedesCount} \r\n        onIncrement={incrementMercedes} \r\n        onDecrement={decrementMercedes} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}